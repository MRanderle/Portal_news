// ===============================================
// tests/integration/evidencias.test.js
// Testes espec√≠ficos para gerar evid√™ncias

describe('Evid√™ncias de Execu√ß√£o dos Testes', () => {
    
    test('Deve gerar evid√™ncia de autentica√ß√£o bem-sucedida', async () => {
        const app = require('./admin.integration.test.js');
        const request = require('supertest');
        
        const response = await request(app)
            .post('/admin/login')
            .send({
                email: 'admin@teste.com',
                senha: '123456'
            });
        
        // Evid√™ncia: Status code de sucesso
        expect(response.status).toBe(200);
        
        // Evid√™ncia: Resposta cont√©m dados esperados
        expect(response.body.success).toBe(true);
        expect(response.body.redirect).toBe('/admin');
        
        // Evid√™ncia: Cookie de sess√£o foi criado
        expect(response.headers['set-cookie']).toBeDefined();
        
        console.log('üìù EVID√äNCIA 1: Autentica√ß√£o bem-sucedida confirmada');
        console.log('   - Status: 200 ‚úÖ');
        console.log('   - Cookie de sess√£o criado ‚úÖ');
        console.log('   - Redirecionamento correto ‚úÖ');
    });
    
    test('Deve gerar evid√™ncia de prote√ß√£o de rotas', async () => {
        const app = require('./admin.integration.test.js');
        const request = require('supertest');
        
        const response = await request(app).get('/admin');
        
        // Evid√™ncia: Acesso negado sem autentica√ß√£o
        expect(response.status).toBe(401);
        expect(response.body.error).toBe('N√£o autorizado');
        
        console.log('üìù EVID√äNCIA 2: Prote√ß√£o de rotas funcionando');
        console.log('   - Acesso negado sem login ‚úÖ');
        console.log('   - Mensagem de erro adequada ‚úÖ');
    });
    
    test('Deve gerar evid√™ncia de valida√ß√£o de dados', async () => {
        const app = require('./admin.integration.test.js');
        const request = require('supertest');
        
        // Primeiro fazer login
        const loginResponse = await request(app)
            .post('/admin/login')
            .send({
                email: 'admin@teste.com',
                senha: '123456'
            });
        
        const cookies = loginResponse.headers['set-cookie'];
        
        // Tentar criar not√≠cia sem dados obrigat√≥rios
        const invalidResponse = await request(app)
            .post('/admin/noticias')
            .set('Cookie', cookies)
            .send({
                categoria_id: 1
                // Sem t√≠tulo e conte√∫do
            });
        
        // Evid√™ncia: Valida√ß√£o rejeitou dados inv√°lidos
        expect(invalidResponse.status).toBe(400);
        expect(invalidResponse.body.error).toContain('obrigat√≥rios');
        
        console.log('üìù EVID√äNCIA 3: Valida√ß√£o de dados funcionando');
        console.log('   - Campos obrigat√≥rios validados ‚úÖ');
        console.log('   - Erro retornado adequadamente ‚úÖ');
    });
});